using System;
using System.Dynamic;
using System.Runtime.InteropServices.ComTypes;

namespace Smb.Core
{
    /// <summary>
    /// The SMB2 NEGOTIATE Response packet is sent by the server to notify the client of the preferred common dialect. This response is composed of an SMB2 header, as specified in section 2.2.1, followed by this response structure.
    /// </summary>
    internal struct NEGOTIATE_Response
    {
        /// <summary>
        /// StructureSize (2 bytes): The server MUST set this field to 65, indicating the size of the response structure, not including the header. The server MUST set it to this value, regardless of the number of negotiate contexts or how long Buffer[] actually is in the response being sent.
        /// </summary>
        public UInt16 StructureSize => 65;
        /// <summary>
        /// SecurityMode (2 bytes): The security mode field specifies whether SMB signing is enabled, required at the server, or both. 
        /// </summary>
        public NegotiateSecurityModes SecurityMode;
        /// <summary>
        /// DialectRevision (2 bytes): The preferred common SMB 2 Protocol dialect number from the Dialects array that is sent in the SMB2 NEGOTIATE Request (section 2.2.3) or the SMB2 wildcard revision number. 
        /// </summary>
        public DialectRevision DialectRevision;
        /// <summary>
        /// NegotiateContextCount/Reserved (2 bytes): If the DialectRevision field is 0x0311, this field specifies the number of negotiate contexts in NegotiateContextList; otherwise, this field MUST NOT be used and MUST be reserved. The server SHOULD set this to 0, and the client MUST ignore it on receipt.<20>
        /// </summary>
        public UInt16 NegotiateContextCount => DialectRevision.HasFlag(DialectRevision.SMB_3_1_1) ? (UInt16) NegotiateContextList?.Length : (UInt16)0;
        /// <summary>
        /// ServerGuid (16 bytes): A globally unique identifier (GUID) that is generated by the server to uniquely identify this server. This field MUST NOT be used by a client as a secure method of identifying a server.<21>
        /// </summary>
        public Guid ServerGuid;
        /// <summary>
        /// (NegotiateContextOffset/NegotiateContextCount/Reserved2)/ClientStartTime (8 bytes): This field is interpreted in different ways depending on the SMB2 Dialects field.
        /// </summary>
        public NegotiateCapabilities Capabilities;
        /// <summary>
        /// MaxTransactSize (4 bytes): The maximum size, in bytes, of the buffer that can be used for QUERY_INFO, QUERY_DIRECTORY, SET_INFO and CHANGE_NOTIFY operations. This field is applicable only for buffers sent by the client in SET_INFO requests, or returned from the server in QUERY_INFO, QUERY_DIRECTORY, and CHANGE_NOTIFY responses.<22>
        /// </summary>
        public UInt32 MaxTransactSize;

        /// <summary>
        /// MaxReadSize (4 bytes): The maximum size, in bytes, of the Length in an SMB2 READ Request (section 2.2.19) that the server will accept.
        /// </summary>
        public UInt32 MaxReadSize;

        /// <summary>
        /// MaxWriteSize (4 bytes): The maximum size, in bytes, of the Length in an SMB2 WRITE Request (section 2.2.21) that the server will accept.
        /// </summary>
        public UInt32 MaxWriteSize;

        /// <summary>
        /// SystemTime (8 bytes): The system time of the SMB2 server when the SMB2 NEGOTIATE Request was processed; in FILETIME format as specified in [MS-DTYP] section 2.3.3.
        /// </summary>
        public FILETIME SystemTime;

        /// <summary>
        /// ServerStartTime (8 bytes): The SMB2 server start time, in FILETIME format as specified in [MS-DTYP] section 2.3.3.
        /// </summary>
        public FILETIME ServerStartTime;

        /// <summary>
        /// SecurityBufferOffset (2 bytes): The offset, in bytes, from the beginning of the SMB2 header to the security buffer.
        /// </summary>
        public UInt16 SecurityBufferOffset;

        /// <summary>
        /// SecurityBufferLength (2 bytes): The length, in bytes, of the security buffer.
        /// </summary>
        public UInt16 SecurityBufferLength => (UInt16)Buffer?.Length;

        /// <summary>
        /// NegotiateContextOffset/Reserved2 (4 bytes): If the DialectRevision field is 0x0311, then this field specifies the offset, in bytes, from the beginning of the SMB2 header to the first 8-byte aligned negotiate context in NegotiateContextList; otherwise, the server MUST set this to 0 and the client MUST ignore it on receipt.
        /// </summary>
        public UInt32 NegotiateContextOffset => DialectRevision.HasFlag(DialectRevision.SMB_3_1_1)? (UInt32) NegotiateContextList?.Length : (UInt32)0;
        /// <summary>
        /// Buffer (variable): The variable-length buffer that contains the security buffer for the response, as specified by SecurityBufferOffset and SecurityBufferLength. The buffer SHOULD contain a token as produced by the GSS protocol as specified in section 3.3.5.4. If SecurityBufferLength is 0, this field is empty and then client-initiated authentication, with an authentication protocol of the client's choice, will be used instead of server-initiated SPNEGO authentication as described in [MS-AUTHSOD] section 2.1.2.2.
        /// </summary>
        public Byte[] Buffer;

        /// <summary>
        /// Padding (variable): Optional padding between the end of the  Buffer field and the first negotiate context in the NegotiateContextList so that the first negotiate context is 8-byte aligned.
        /// </summary>
        public Byte[] Padding;


        /// <summary>
        /// NegotiateContextList (variable): If the DialectRevision field is 0x0311, a list of negotiate contexts. The first negotiate context in the list MUST appear at the byte offset indicated by the SMB2 NEGOTIATE response's NegotiateContextOffset. Subsequent negotiate contexts MUST appear at the first 8-byte aligned offset following the previous negotiate context. 
        /// </summary>
        public ICapability[] NegotiateContextList; 
    }
}
